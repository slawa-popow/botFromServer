from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from config import Config
from database.db import DataBase
from database.basket import Basket
from states.fsm_states import Order
from keyboards.keyboards import *
from utils import *
from middlewares.AuthFilter import AuthFilter
from datetime import datetime
from spamer.Spamer import Spamer

STOP_INPUT = 'noid'

bot = Bot(token=Config.TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())
db = DataBase()
dp.setup_middleware(AuthFilter(db))
basket = Basket(db)
spamer = Spamer(db, bot)

def get_items_basket(result) -> str:
    llist = []
    for x in result:
        llist.append(x[16]*x[14])
    sdfsdf =sum([float(i) for i in llist])
    return '\n'.join([f'{index+1}) {el[11]} {el[14]} —à—Ç –ø–æ {el[16]} = {el[16]*el[14]}  —Ä—É–±' for index, el in enumerate(result)]) + f"\n\n<b>–∏—Ç–æ–≥–æ: {sdfsdf} —Ä—É–±</b>"



# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    
    await Order.start.set()
    user_id = str(message.from_user.id)
    user_name = message.from_user.username
    await state.update_data(usrid=user_id, chatID=message.chat.id, user_name=f'@{user_name}')
    current_datetime = str(datetime.now())
    tmpd = {
        'uid': user_id,
        'user_name': user_name,
        'date': current_datetime
    }
    await basket.create_basket_table(user_id=user_id)
    await message.answer(
        """ üëè–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞üëè.\n –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–∏–Ω—Å–∫—É –æ—Ç 10 –µ–¥–∏–Ω–∏—Ü –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–∫–∞–∑–µ üòç.\n –°–¥–µ–ª–∞–π –∑–∞–∫–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤, –≤—ã–±–µ—Ä–∏ –∞–¥—Ä–µ—Å –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ üöÅ.\n–ñ–º–∏ '–ø–æ–∏—Å–∫/–∑–∞–∫–∞–∑–∞—Ç—å'\n\n\n<b>–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –∑–∞–ø–∏—Å–∏.....</b>""",
        reply_markup=get_kb_main(user_id)
    )
    # await bot.send_video(message.chat.id, open('/home/media/bandicam.mp4', 'rb'))
    return await basket.run_sesion_timer({
        'id': user_id, 
        'time_session': Config.TIME_SESSION,
        'callback': basket.clb_delete_session,
        'args': (message, tmpd)
    })  


@dp.message_handler(state=Order.auth)
async def enter_pswd(message: types.Message, state: FSMContext):
    passw = message.text
    await message.delete()
    await message.answer(f"{'*' * len(passw)}")
    hash_passw = encode_password(passw)
    await state.update_data(token=hash_passw)
    await state.reset_state(with_data = False)
    await message.answer('–•–æ—Ä–æ—à–æ.\n–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑.')
     

@dp.message_handler(commands=['stopSpam'], state='*')
async def safe_spam_stop(message: types.Message, state: FSMContext):
    await message.answer('–•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å.')
    await spamer.stopspam()  


@dp.message_handler(commands=['info'], state='*')
async def safe_info(message: types.Message, state: FSMContext):
    await message.answer(f"""<b>–°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n
    <i>/startSpam</i>   --  –ù–∞—á–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
    <i>/stopSpam</i>    --   –ó–∞–∫–æ–Ω—á–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
    <i>/periodSpam</i>  --  –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
    <i>/clearSpam</i>   --  –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∏ –∏–∑ –±–¥
    <i>/allSpam</i>     --  –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
    
    """)
    


@dp.message_handler(commands=['startSpam'], state='*')
async def safe_spam_start(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–≥–Ω–∞–ª–∏ —Å–ø–∞–º–∏—Ç—å....')
    await message.answer('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Å–µ–∫—É–Ω–¥–æ–≤) –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–ø–∞–º–æ–≤:')
    await Order.duration_spam.set()


@dp.message_handler(commands=['clearSpam'], state='*')
async def safe_spam_clear(message: types.Message, state: FSMContext):
    await message.answer('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è.')
    await spamer.del_all_spam()
    await message.answer('–û—á–∏—â–µ–Ω–æ')
    return await spamer.stopspam()


@dp.message_handler(commands=['allSpam'], state='*')
async def safe_spam_all_get(message: types.Message, state: FSMContext):
    await message.answer('–í–µ—Å—å —Å–ø–∞–º:')
    all_spam = await spamer.get_all_spam()
    for row in all_spam:
        id, txt, dur = row[1:]
        await message.answer(f'{id}: {txt}\n-------------------------\n–ø–µ—Ä–∏–æ–¥: {dur} —Å–µ–∫')
     
     
    
    

@dp.message_handler(state=Order.duration_spam)
async def safe_spam_input_id(message: types.Message, state: FSMContext):
    input = message.text
    spamer.set_duration_spam(input)
    dur = spamer.get_duration()
    await Order.victim.set()
    await message.answer(f'–ó–∞–¥–∞–Ω–æ: {dur} —Å–µ–∫')
    
    return await message.answer('–í–≤–µ–¥–∏ –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —Å–ø–∞–º–∏—Ç—å.\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤–≤–æ–¥–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ id –Ω–∞–±–µ—Ä–∏ <b>noid</b>')


@dp.message_handler(state=Order.victim)
async def safe_add_victim(message: types.Message, state: FSMContext):
    # [1941650155, 6627246261]
    input = message.text
    if input.strip() == STOP_INPUT:
        await state.reset_state(with_data = False)
        await spamer.add_victim()
        await spamer.init()
        return await message.answer('–ó–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ id.')
    try:
        input = int(message.text)
    except Exception:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ')
    else:
        await state.update_data(spamid=input)
        await Order.victim_text.set()
        
        return await message.answer('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å–ø–∞–º–∞:')
    
    
@dp.message_handler(state=Order.victim_text)
async def safe_add_victim_text(message: types.Message, state: FSMContext):
    input = message.text
    if input == STOP_INPUT:
        await state.reset_state(with_data = False)
        await spamer.add_victim()
        await spamer.init()
        return await message.answer('–ó–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ text.')
    else:
        _id = await state.get_data()
        id = _id.get('spamid', "")
        await spamer.add_victim_id_text([id, input])
        await Order.victim.set()
        return await message.answer('–í–≤–µ–¥–∏ –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —Å–ø–∞–º–∏—Ç—å.\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ –Ω–∞–±–µ—Ä–∏ <b>noid</b>')
    
        
@dp.message_handler(commands=['periodSpam'], state='*')
async def safe_spam_period(message: types.Message, state: FSMContext):
    dur = spamer.get_duration()
    await message.answer(f'–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–º–∞: {dur} —Å–µ–∫—É–Ω–¥')
    

# –ó–¥–µ—Å—å –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å
@dp.callback_query_handler(lambda m: m.data and m.data == 'exit_order', state=Order.all_states_names)
async def exit_order_callback_query(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await db.delete_basket_table(user_id=user_id)
    if user_id in basket.basket_table:
        basket.basket_table.remove(user_id)
        basket.curr_timers.pop(user_id)
    await callback_query.message.answer('–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞, –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.')
    await state.finish()


@dp.message_handler(text='–∑–∞–≤–µ—Ä—à–∏—Ç—å', state=Order.change_order)
async def exit_order_msg(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await db.delete_basket_table(user_id=user_id)
    if user_id in basket.basket_table:
        basket.basket_table.remove(user_id)
        basket.curr_timers.pop(user_id)
    await message.answer('–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞, –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.')
    await state.finish()


# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É
@dp.message_handler(text='–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', state=Order.all_states_names)
async def ask_question(message: types.Message, state: FSMContext):
    await message.answer('–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ @Vapee_manager.')


# –ó–¥–µ—Å—å –±–æ—Ç –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç webApp –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ window.Telegram.WebApp.sendData() –∏–∑ javascript 
@dp.message_handler(lambda msg: msg.web_app_data.data=='order-off', content_types='web_app_data', state=Order.start)
@dp.message_handler(text='–∫–æ—Ä–∑–∏–Ω–∞', state=Order.start)
async def order_basket(message: types.Message,  state: FSMContext) -> None:
    us = await state.get_data()
    usid = us.get('usrid', '')
    if not usid:
        return await message.answer('–Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à id. –ù–∞–ø–∏—à–∏—Ç–µ /start.')
    result = await basket.get_basket(usid)
    prods = get_items_basket(result)
    kb, inline_kb = get_kb_after_web_app(usid)
    await message.answer('–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ', reply_markup=kb)
    return await message.answer(f"{prods}", reply_markup=inline_kb)


# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(lambda m: m.data and m.data in ('go_to_checkout', 'change_delivery'), state=Order.start)
async def continue_order(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=get_kb_order_delivery())


# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(lambda m: m.data and m.data.startswith('delivery_'), state=Order.start)
async def select_delivery(callback_query: types.CallbackQuery, state: FSMContext):
    delivery_method = callback_query.data.replace('delivery_', '')
    if delivery_method == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        msg_text = '–°–∞–º–æ–≤—ã–≤–æ–∑\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 0 —Ä—É–±\n–°—Ä–æ–∫ –æ—Ç–≥—Ä—É–∑–∫–∏: —Å–µ–≥–æ–¥–Ω—è'
        media = types.MediaGroup()
        media.attach_photo(types.InputFile('media/self_pickup/map.jpg'))
        media.attach_photo(types.InputFile('media/self_pickup/photo.jpg'))
        await callback_query.message.answer_media_group(media)
        return await callback_query.message.answer(
            msg_text,
            reply_markup=get_kb_delivery_choice(delivery_method)
        )
    elif delivery_method == '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥. –ú–∏–Ω—Å–∫':
        msg_text = '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥. –ú–∏–Ω—Å–∫\n–°—Ç–æ–∏–º–æ—Å—Ç—å:\n–æ—Ç 10 –µ–¥–∏–Ω–∏—Ü - 7 —Ä—É–±–ª–µ–π\n–æ—Ç 30 –µ–¥–∏–Ω–∏—Ü - 5 —Ä—É–±–ª–µ–π\n–°—Ä–æ–∫–∏ –æ—Ç–≥—Ä—É–∑–∫–∏: –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ 16:30 –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥–µ–Ω—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è'
    elif delivery_method == '–ú–∞—Ä—à—Ä—É—Ç–∫–æ–π –ø–æ –†–ë':
        msg_text = '–ú–∞—Ä—à—Ä—É—Ç–∫–æ–π –ø–æ –†–ë\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 5-10 —Ä—É–± –º–∞—Ä—à—Ä—É—Ç—á–∏–∫—É\n–°—Ä–æ–∫–∏ –æ—Ç–≥—Ä—É–∑–∫–∏: –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞'
    elif delivery_method == '–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É':
        msg_text = '–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É\n–°—Ç–æ–∏–º–æ—Å—Ç—å: –ø–æ —Ç–∞—Ä–∏—Ñ—É –Ø–Ω–¥–µ–∫—Å\n–°—Ä–æ–∫–∏ –æ—Ç–≥—Ä—É–∑–∫–∏: —á–µ—Ä–µ–∑ 10 –º–∏–Ω\n100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞'
    else:
        return await callback_query.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ:',
            reply_markup=get_kb_post_rb_delivery()
        )
    await callback_query.message.edit_text(
        msg_text,
        reply_markup=get_kb_delivery_choice(delivery_method)
    )


# –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π –ø–æ –†–ë
@dp.callback_query_handler(lambda m: m.data and m.data.startswith('rb_delivery'), state=Order.start)
async def select_rb_delivery(callback_query: types.CallbackQuery, state: FSMContext):
    delivery_method = callback_query.data.replace('rb_delivery_', '')
    if delivery_method == '–ï–≤—Ä–æ–ø–æ—á—Ç–∞':
        await callback_query.message.edit_text(
            '–ï–≤—Ä–æ–ø–æ—á—Ç–∞\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: # —Ä—É–±\n–°—Ä–æ–∫–∏ –æ—Ç–≥—Ä—É–∑–∫–∏: –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ 16:30 –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¥–µ–Ω—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞',
            reply_markup=get_kb_delivery_choice('–ï–≤—Ä–æ–ø–æ—á—Ç–∞')
        )
    elif delivery_method == '–ê–≤—Ç–æ–ª–∞–π—Ç':
        await callback_query.message.edit_text(
            '–ê–≤—Ç–æ–ª–∞–π—Ç (100 –µ–¥–∏–Ω–∏—Ü)\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: # —Ä—É–±\n–°—Ä–æ–∫–∏ –æ—Ç–≥—Ä—É–∑–∫–∏: –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å\n100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞',
            reply_markup=get_kb_delivery_choice('–ê–≤—Ç–æ–ª–∞–π—Ç')
        )


# –í—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(lambda m: m.data and m.data.startswith('selected_delivery'), state=Order.start)
async def shipment_process(callback_query: types.CallbackQuery, state: FSMContext):
    delivery_method = callback_query.data.replace('selected_delivery_', '')
    # –∑–∞–ø–∏—Å—å –≤ –±–¥
    await db.update_delivery_method(user_id=callback_query.from_user.id, delivery_method=delivery_method)
    await state.update_data(delivery_method=delivery_method)
    if delivery_method == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        await Order.delivery_date.set()
        await callback_query.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ –¥–∞—Ç—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞), –¥–æ 15:30 –ú–°–ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
            reply_markup=get_kb_delivery_date(is_today_delivery())
        )
    else:
        await Order.delivery_address.set()
        await callback_query.message.edit_text('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state=Order.delivery_address)
async def get_delivery_address(message: types.Message, state: FSMContext):
    await state.update_data(delivery_address=message.text)
    await db.update_delivery_address(user_id=message.from_user.id, delivery_address=message.text)
    data = await state.get_data()
    delivery_method = data.get('delivery_method')
    if delivery_method == '–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É':
        await Order.start.set()
        return await message.answer(
            '–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.',
            reply_markup=get_kb_yandex_delivery()
        )
    await Order.next()
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ –¥–∞—Ç—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞), –¥–æ 15:30 –ú–°–ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
        reply_markup=get_kb_delivery_date(is_today_delivery())
    )
    

# –í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(lambda m: m.data and m.data.startswith('date_delivery'), state=Order.delivery_date)
async def get_shipment_date(callback_query: types.CallbackQuery, state: FSMContext):
    await Order.next()
    delivery_date = callback_query.data.replace('date_delivery_', '')
    await state.update_data(delivery_date=delivery_date)
    await callback_query.message.edit_text(
        '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏/—Å–∞–º–æ–≤—ã–≤–æ–∑–∞',
        reply_markup=get_kb_delivery_time()
    )


# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞

# –ø–æ—Å–ª–µ —è–Ω–¥–µ–∫—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query_handler(text='confirm_yandex_delivery', state=Order.start)

@dp.callback_query_handler(lambda m: m.data and m.data.startswith('time_delivery'), state=Order.delivery_time)
async def get_shipment_time(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    delivery_time = callback_query.data.replace('time_delivery_', '')
    await state.update_data(delivery_time=delivery_time)
    usid = data.get('usrid')
    result = await basket.get_basket(usid)
    prods = get_items_basket(result)
    delivery_method = data.get('delivery_method')
    delivery_address = data.get('delivery_address') if delivery_method != '–°–∞–º–æ–≤—ã–≤–æ–∑' else '–°–∞–º–æ–≤—ã–≤–æ–∑'
    delivery_date = data.get('delivery_date')
    # –∑–∞–ø–∏—Å—å –≤ –±–¥
    msg_text = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n\n–í—ã –∑–∞–∫–∞–∑–∞–ª–∏: {prods}\n–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n–ê–¥—Ä–µ—Å: {delivery_address}\n'
    if delivery_method != '–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É':
        await db.update_datetime_delivery(user_id=callback_query.from_user.id, delivery_datetime=f'{delivery_time} {delivery_date}')
        yandex_delivery = False
        msg_text += f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {delivery_time} {delivery_date}'
    else:
        await db.update_datetime_delivery(user_id=callback_query.from_user.id, delivery_datetime='–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–∫–∞')
        yandex_delivery = True
        msg_text += f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
    await callback_query.message.edit_text(
        msg_text,
        reply_markup=get_kb_payment_proceeding(yandex_delivery)
    )


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(text='change_order', state=Order.all_states_names)
async def select_pay_method(callback_query: types.CallbackQuery, state: FSMContext):
    await Order.change_order.set()
    data = await state.get_data()
    usid = data.get('usrid')
    await callback_query.message.answer(
        '–ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        reply_markup=get_kb_change_order(usid)
    )


# –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ –±–æ—Ç—É –≤–æ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda msg: msg.web_app_data.data=='order-off', content_types='web_app_data', state=Order.change_order)
async def change_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    usid = data.get('usrid', '')
    if not usid:
        return await message.answer('–Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à id. –ù–∞–ø–∏—à–∏—Ç–µ /start.')
    result = await basket.get_basket(usid)
    prods = get_items_basket(result)
    delivery_method = data.get('delivery_method')
    is_self_pickup = True if data.get('delivery_method') == '–°–∞–º–æ–≤—ã–≤–æ–∑' else False
    delivery_address = data.get('delivery_address') if delivery_method != '–°–∞–º–æ–≤—ã–≤–æ–∑' else '–°–∞–º–æ–≤—ã–≤–æ–∑'
    delivery_date = data.get('delivery_date')
    delivery_time = data.get('delivery_time')
    msg_text = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n\n–í—ã –∑–∞–∫–∞–∑–∞–ª–∏: {prods}\n–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n–ê–¥—Ä–µ—Å: {delivery_address}\n'
    if delivery_method != '–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É':
        yandex_delivery = False
        msg_text += f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {delivery_time} {delivery_date}'
    else:
        yandex_delivery = True
        msg_text += f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
    await message.answer(
        msg_text,
        reply_markup=get_kb_change('items', yandex_delivery, is_self_pickup)
    )


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(text='change_delivery_address', state=Order.all_states_names)
async def change_delivery_address(callback_query: types.CallbackQuery, state: FSMContext):
    await Order.change_delivery_address.set()
    await callback_query.message.edit_text('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
    

@dp.message_handler(state=Order.change_delivery_address)
async def set_new_delivery_address(message: types.Message, state: FSMContext):
    delivery_address = message.text
    await state.update_data(delivery_address=delivery_address)
    await db.update_delivery_address(user_id=message.from_user.id, delivery_address=delivery_address)
    data = await state.get_data()
    usid = data.get('usrid', '')
    if not usid:
        return await message.answer('–Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à id. –ù–∞–ø–∏—à–∏—Ç–µ /start.')
    result = await basket.get_basket(usid)
    prods = get_items_basket(prods)
    delivery_method = data.get('delivery_method')
    delivery_date = data.get('delivery_date')
    delivery_time = data.get('delivery_time')
    msg_text = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n\n–í—ã –∑–∞–∫–∞–∑–∞–ª–∏: {prods}\n–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n–ê–¥—Ä–µ—Å: {delivery_address}\n'
    if delivery_method != '–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É':
        yandex_delivery = False
        msg_text += f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {delivery_time} {delivery_date}'
    else:
        yandex_delivery = True
        msg_text += f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
    await message.answer(
        msg_text,
        reply_markup=get_kb_change('address', yandex_delivery)
    )


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(text='change_delivery_datetime', state=Order.all_states_names)
async def change_delivery_datetime(callback_query: types.CallbackQuery, state: FSMContext):
    await Order.change_delivery_date.set()
    await callback_query.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ –¥–∞—Ç—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞), –¥–æ 15:30 –ú–°–ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
        reply_markup=get_kb_delivery_date(is_today_delivery())
    )


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(lambda m: m.data and m.data.startswith('date_delivery'), state=Order.change_delivery_date)
async def change_delivery_date(callback_query: types.CallbackQuery, state: FSMContext):
    await Order.change_delivery_time.set()
    delivery_date = callback_query.data.replace('date_delivery_', '')
    await state.update_data(delivery_date=delivery_date)
    await callback_query.message.edit_text(
        '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏/—Å–∞–º–æ–≤—ã–≤–æ–∑–∞',
        reply_markup=get_kb_delivery_time()
    )


@dp.callback_query_handler(lambda m: m.data and m.data.startswith('time_delivery'), state=Order.change_delivery_time)
async def change_delivery_date(callback_query: types.CallbackQuery, state: FSMContext):
    delivery_time = callback_query.data.replace('time_delivery_', '')
    await state.update_data(delivery_time=delivery_time)
    data = await state.get_data()
    is_self_pickup = True if data.get('delivery_method') == '–°–∞–º–æ–≤—ã–≤–æ–∑' else False
    result = await basket.get_basket(callback_query.from_user.id)
    prods = get_items_basket(result)
    delivery_method = data.get('delivery_method')
    delivery_date = data.get('delivery_date')
    delivery_address = data.get('delivery_address') if delivery_method != '–°–∞–º–æ–≤—ã–≤–æ–∑' else '–°–∞–º–æ–≤—ã–≤–æ–∑'
    msg_text = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n\n–í—ã –∑–∞–∫–∞–∑–∞–ª–∏: {prods}\n–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n–ê–¥—Ä–µ—Å: {delivery_address}\n'
    if delivery_method != '–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É':
        await db.update_datetime_delivery(user_id=callback_query.from_user.id, delivery_datetime=f'{delivery_time} {delivery_date}')
        yandex_delivery = False
        msg_text += f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {delivery_time} {delivery_date}'
    else:
        await db.update_datetime_delivery(user_id=callback_query.from_user.id, delivery_datetime='–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–∫–∞')
        yandex_delivery = True
        msg_text += f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
    await callback_query.message.edit_text(
        msg_text,
        reply_markup=get_kb_change('datetime', yandex_delivery, is_self_pickup)
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.callback_query_handler(text='write_comment', state=Order.all_states_names)
async def get_comment(callback_query: types.CallbackQuery, state: FSMContext):
    await Order.comment.set()
    await callback_query.message.edit_text(
        '–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?',
        reply_markup=get_kb_comment()
    )


@dp.callback_query_handler(text='select_comment', state=Order.comment)
async def get_comment(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text('–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')


@dp.message_handler(state=Order.comment)
async def get_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await db.update_comment(user_id=message.from_user.id, comment=message.text)
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ: ',
        reply_markup=get_kb_after_comment()
    )


# –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text='select_pay_method', state=Order.all_states_names)
async def select_pay_method(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get('comment'):
        await db.update_comment(user_id=callback_query.from_user.id, comment='NO') 
    await Order.payment_method.set()
    data = await state.get_data()
    only_online_payment = False if data.get('delivery_method') in ('–°–∞–º–æ–≤—ã–≤–æ–∑', '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥. –ú–∏–Ω—Å–∫') else True
    await callback_query.message.edit_text(
        '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: ',
        reply_markup=get_kb_payment_methods(only_online_payment)
    )


@dp.callback_query_handler(lambda m: m.data and m.data.startswith('pay_method'), state=Order.payment_method)
async def payment_proceeding(callback_query: types.CallbackQuery, state: FSMContext):
    payment_method = callback_query.data.replace('pay_method_', '')
    if payment_method == '–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç':
        await callback_query.message.edit_text(
            '–í—ã–±–æ—Ä –±–∞–Ω–∫–∞: ',
            reply_markup=get_kb_banks()
        )
    else:
        await db.update_pay_method(user_id=callback_query.from_user.id, pay_method=payment_method)
        await state.update_data(pay_method=payment_method)
        await callback_query.message.edit_text(
            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑',
            reply_markup=get_kb_confirm_order()
        )


# –í—ã–±–æ—Ä –±–∞–Ω–∫–∞ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(lambda m: m.data and m.data.startswith('bank'), state=Order.payment_method)
async def select_bank(callback_query: types.CallbackQuery, state: FSMContext):
    bank_name = callback_query.data.replace('bank_', '')
    await db.update_pay_method(user_id=callback_query.from_user.id, pay_method=bank_name)
    if bank_name == '–ë–ù–ë –±–∞–Ω–∫':
        await Order.bank_choice.set()
        await callback_query.message.edit_text(
            '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –µ—Ä–∏–ø: 3001899330002523/9969\n' + \
            '–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –¥—Ä–µ–≤–æ –µ—Ä–∏–ø\n' + \
            '- –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã\n' + \
            '- –ë–∞–Ω–∫–∏ –Ω–∫—Ñ–æ\n' + \
            '- –ë–ù–ë –±–∞–Ω–∫\n' + \
            '- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã\n' + \
            '–í–≤–æ–¥–∏—Ç–µ —Å—á—ë—Ç, –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ.',
            reply_markup=get_kb_after_banks()
        )
    else:
        await callback_query.message.edit_text(
            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑',
            reply_markup=get_kb_confirm_order()
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(text='go_to_receipt', state=Order.bank_choice)
async def go_to_receipt(callback_query: types.CallbackQuery, state: FSMContext):
    await Order.payment_receipt.set()   
    await callback_query.message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á–µ–∫ —Å –æ–ø–ª–∞—Ç–æ–π',
        reply_markup=get_kb_receipt()
    )


@dp.message_handler(state=Order.payment_receipt, content_types='photo')
async def go_to_receipt(message: types.Message, state: FSMContext):
    for photo in message.photo[::-1]:
        # –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1 –º–±
        if photo.file_size <= 1024*1024:
            file_id = photo.file_id
            break
    else:
        return await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ!',
            reply_markup=get_kb_receipt()
        )
    result = (await bot.download_file_by_id(file_id)).getvalue()
    await state.update_data(receipt=result)
    await state.update_data(pay_method='–ë–ù–ë –±–∞–Ω–∫')
    await db.update_receipt(user_id=message.from_user.id, photo=result)
    await db.update_pay_status(user_id=message.from_user.id, status='–û–ø–ª–∞—á–µ–Ω–æ')
    await db.update_pay_method(user_id=message.from_user.id, pay_method='–ë–ù–ë –±–∞–Ω–∫')
    await message.answer(
        '–•–æ—Ä–æ—à–æ, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!',
        reply_markup=get_kb_confirm_order()
    )


@dp.message_handler(state=Order.payment_receipt, content_types=NOT_ALLOWED_CONTENT_TYPES_RECEIPT)
async def go_to_receipt(message: types.Message, state: FSMContext):
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!',
        reply_markup=get_kb_receipt()
    )


# –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text='go_to_order', state=Order.payment_method)
async def go_to_order(callback_query: types.CallbackQuery, state: FSMContext):
    result = await basket.get_basket(callback_query.from_user.id)
    prods = get_items_basket(result)
    data = await state.get_data()
    is_self_pickup = True if data.get('delivery_method') == '–°–∞–º–æ–≤—ã–≤–æ–∑' else False
    delivery_method = data.get('delivery_method')
    delivery_date = data.get('delivery_date')
    delivery_address = data.get('delivery_address') if delivery_method != '–°–∞–º–æ–≤—ã–≤–æ–∑' else '–°–∞–º–æ–≤—ã–≤–æ–∑'
    delivery_time = data.get('delivery_time')
    msg_text = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n\n–í—ã –∑–∞–∫–∞–∑–∞–ª–∏: {prods}\n–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n–ê–¥—Ä–µ—Å: {delivery_address}\n'
    if delivery_method != '–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É':
        yandex_delivery = False
        msg_text += f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {delivery_time} {delivery_date}'
    else:
        yandex_delivery = True
        msg_text += f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
    await callback_query.message.edit_text(
        msg_text,
        reply_markup=get_kb_change('before_payment', yandex_delivery, is_self_pickup)
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(text='confirm_order', state=Order.all_states)
async def confirm_order(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    data = await state.get_data()
    user_name = data.get('user_name')
    if user_name is not None:
        await db.update_user_name(user_id=user_id, user_name=f'@{user_name}')
    else:
        await Order.no_username.set()
        return await callback_query.message.edit_text(
            '–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π @username (—Ç–µ–≥) –≤ —Ç–µ–ª–µ–≥—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏ –∫–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è (–æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç–æ–º)'
        )

    result = await basket.get_basket(user_id)
    receipt = data.get('receipt')
    prods = get_items_basket(result)
    delivery_method = data.get('delivery_method')
    delivery_date = data.get('delivery_date')
    delivery_address = data.get('delivery_address') if delivery_method != '–°–∞–º–æ–≤—ã–≤–æ–∑' else '–°–∞–º–æ–≤—ã–≤–æ–∑'
    delivery_time = data.get('delivery_time')
    comment = data.get('comment', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
    pay_method = data.get('pay_method')
    msg_text = f'–í—ã –∑–∞–∫–∞–∑–∞–ª–∏:\n{prods}\n–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n–ê–¥—Ä–µ—Å: {delivery_address}\n'
    if delivery_method != '–Ø–Ω–¥–µ–∫—Å–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É':
        msg_text += f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {delivery_time} {delivery_date}'
    else:
        msg_text += f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
    msg_text += f'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}'
    msg_text += f'\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {pay_method}'

    await db.update_order_status(user_id=user_id, status='–í –æ–∂–∏–¥–∞–Ω–∏–∏')
    await db.transfer_basket_to_orders(user_id=user_id, data=result)
    await state.finish()
    await db.delete_basket_table(user_id=user_id)
    if user_id in basket.basket_table:
        basket.basket_table.remove(user_id)
        basket.curr_timers.pop(user_id)
    await callback_query.message.edit_text(
        msg_text
    )
    await callback_query.message.answer(
        '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∑–∞–∫–∞–∑! –ü–µ—Ä–µ–¥–∞–¥–∏–º –∫–∞–∫ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å :)',
        reply_markup=types.ReplyKeyboardRemove()
)
    # 
    # ------------- –∞–π–¥–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—É—â–≤-–π ----------------------------------------
    #
    admin_id = "66272XXXXX"
    await bot.send_message(chat_id=admin_id, text=f'{user_name} —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑.\n\n{msg_text}')
    if receipt:
        await bot.send_photo(chat_id=admin_id, photo=receipt, caption='–ß–µ–∫ –æ–ø–ª–∞—Ç—ã')


@dp.message_handler(state=Order.no_username)
async def get_user_contacts(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(user_name=message.text)
    await db.update_user_name(user_id=user_id, user_name=message.text)
    await message.answer(
        '–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ',
        reply_markup=get_kb_confirm_order()
    )


if __name__ == '__main__':
    print('\n--------- start bot ---------\n')
    executor.start_polling(dp)